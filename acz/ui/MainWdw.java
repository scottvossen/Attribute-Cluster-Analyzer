package acz.ui;

import acz.Attribute;
import acz.Attribute.AttrType;
import acz.Attribute.AttrUsage;
import acz.Instance;
import acz.analyzer.AttrClustAnalyzer;
import acz.input.IdavReader;
import acz.input.IdavReaderFactory;
import acz.output.AczOutputWriter;
import acz.output.IdavWriter;
import java.awt.TextArea;
import java.io.File;
import java.io.IOException;
import java.net.URL;
import java.util.EventListener;
import java.util.concurrent.atomic.AtomicReference;
import javax.swing.*;
import javax.swing.table.TableColumn;

// Input filters for the file sector
class AANInputFilter extends javax.swing.filechooser.FileFilter implements EventListener {
    @Override
    public boolean accept(File file) {
        return file.isDirectory() ||
                file.getAbsolutePath().toLowerCase().endsWith(".txt") ||
                file.getAbsolutePath().toLowerCase().endsWith(".arff");
    }
    @Override
    public String getDescription() { return "AAN Input Documents (*.txt, *.arff)"; }
}

// Input filters for the file sector
class AANOutputFilter extends javax.swing.filechooser.FileFilter {
    @Override
    public boolean accept(File file) {
        return file.isDirectory() || file.getName().toLowerCase().endsWith(".xml");
    }
    @Override
    public String getDescription() { return "AAN Output (*.xml)"; }
}

// Input filters for the file sector
class Txt_Filter extends javax.swing.filechooser.FileFilter {
    @Override
    public boolean accept(File file) {
        return file.isDirectory() || file.getName().toLowerCase().endsWith(".txt");
    }
    @Override
    public String getDescription() { return "Idav Files (*.txt)"; }
}

public class MainWdw extends javax.swing.JFrame {
    private AttrClustAnalyzer analyzer;
    private File selectedInputFile;
    AtomicReference<Attribute[]> attrs;
    AtomicReference<Instance[]> insts;
    
    public MainWdw() {
        initComponents();
        URL iconUrl = this.getClass().getResource("/images/ACZ.png");
        ImageIcon imgIcon = new ImageIcon(iconUrl);
        this.setIconImage(imgIcon.getImage());
        this.setTitle("Attribute & Cluster Analyzer");
        this.setLocationRelativeTo(null); // center on screen
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        inputFileChooser = new javax.swing.JFileChooser();
        outputFileChooser = new javax.swing.JFileChooser();
        txtFileChooser = new javax.swing.JFileChooser();
        jTabbedPane_Main = new javax.swing.JTabbedPane();
        jPanel_Data = new javax.swing.JPanel();
        jSplitPane2 = new javax.swing.JSplitPane();
        jPanel_rawData = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea_rawData = new javax.swing.JTextArea();
        jSplitPane1 = new javax.swing.JSplitPane();
        jPanel_attrData = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTable_attrData = new javax.swing.JTable();
        jPanel_instData = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable_instData = new javax.swing.JTable();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu_File = new javax.swing.JMenu();
        jMenuItem_open = new javax.swing.JMenuItem();
        jMenuItem_exportAanResults = new javax.swing.JMenuItem();
        jMenuItem_exportSimplifiedIdav = new javax.swing.JMenuItem();
        jMenuItem_exit = new javax.swing.JMenuItem();
        jMenu_Run = new javax.swing.JMenu();
        jMenuItem_runAnalysis = new javax.swing.JMenuItem();
        jMenuItem_runBayes = new javax.swing.JMenuItem();

        inputFileChooser.setDialogTitle("Select a File to Process");
        inputFileChooser.setFileFilter(new AANInputFilter());

        outputFileChooser.setDialogType(javax.swing.JFileChooser.SAVE_DIALOG);
        outputFileChooser.setDialogTitle("Select Export Location");
        outputFileChooser.setFileFilter(new AANOutputFilter());

        txtFileChooser.setDialogType(javax.swing.JFileChooser.SAVE_DIALOG);
        txtFileChooser.setFileFilter(new Txt_Filter());

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(800, 600));

        jTabbedPane_Main.setTabPlacement(javax.swing.JTabbedPane.BOTTOM);
        jTabbedPane_Main.setToolTipText("");

        jSplitPane2.setDividerLocation(900);

        jPanel_rawData.setBorder(javax.swing.BorderFactory.createTitledBorder("Raw Data"));

        jTextArea_rawData.setColumns(20);
        jTextArea_rawData.setRows(5);
        jTextArea_rawData.setTabSize(4);
        jTextArea_rawData.setEnabled(false);
        jScrollPane1.setViewportView(jTextArea_rawData);

        javax.swing.GroupLayout jPanel_rawDataLayout = new javax.swing.GroupLayout(jPanel_rawData);
        jPanel_rawData.setLayout(jPanel_rawDataLayout);
        jPanel_rawDataLayout.setHorizontalGroup(
            jPanel_rawDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 277, Short.MAX_VALUE)
        );
        jPanel_rawDataLayout.setVerticalGroup(
            jPanel_rawDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 515, Short.MAX_VALUE)
        );

        jSplitPane2.setRightComponent(jPanel_rawData);

        jSplitPane1.setDividerLocation(150);
        jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        jPanel_attrData.setBorder(javax.swing.BorderFactory.createTitledBorder("Attributes"));

        jTable_attrData.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable_attrData.setEnabled(false);
        jScrollPane4.setViewportView(jTable_attrData);

        javax.swing.GroupLayout jPanel_attrDataLayout = new javax.swing.GroupLayout(jPanel_attrData);
        jPanel_attrData.setLayout(jPanel_attrDataLayout);
        jPanel_attrDataLayout.setHorizontalGroup(
            jPanel_attrDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 885, Short.MAX_VALUE)
        );
        jPanel_attrDataLayout.setVerticalGroup(
            jPanel_attrDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 126, Short.MAX_VALUE)
        );

        jSplitPane1.setTopComponent(jPanel_attrData);

        jPanel_instData.setBorder(javax.swing.BorderFactory.createTitledBorder("Instances"));

        jTable_instData.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable_instData.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jTable_instData.setEnabled(false);
        jScrollPane3.setViewportView(jTable_instData);

        javax.swing.GroupLayout jPanel_instDataLayout = new javax.swing.GroupLayout(jPanel_instData);
        jPanel_instData.setLayout(jPanel_instDataLayout);
        jPanel_instDataLayout.setHorizontalGroup(
            jPanel_instDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 885, Short.MAX_VALUE)
        );
        jPanel_instDataLayout.setVerticalGroup(
            jPanel_instDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 359, Short.MAX_VALUE)
        );

        jSplitPane1.setRightComponent(jPanel_instData);

        jSplitPane2.setLeftComponent(jSplitPane1);

        javax.swing.GroupLayout jPanel_DataLayout = new javax.swing.GroupLayout(jPanel_Data);
        jPanel_Data.setLayout(jPanel_DataLayout);
        jPanel_DataLayout.setHorizontalGroup(
            jPanel_DataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane2, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        jPanel_DataLayout.setVerticalGroup(
            jPanel_DataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane2, javax.swing.GroupLayout.Alignment.TRAILING)
        );

        jTabbedPane_Main.addTab("Data", jPanel_Data);

        jMenu_File.setText("File");

        jMenuItem_open.setText("Open");
        jMenuItem_open.setToolTipText("Open a idav or arff file");
        jMenuItem_open.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_openActionPerformed(evt);
            }
        });
        jMenu_File.add(jMenuItem_open);

        jMenuItem_exportAanResults.setText("Export Results");
        jMenuItem_exportAanResults.setEnabled(false);
        jMenuItem_exportAanResults.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_exportAanResultsActionPerformed(evt);
            }
        });
        jMenu_File.add(jMenuItem_exportAanResults);

        jMenuItem_exportSimplifiedIdav.setText("Export Preprocessed iDAV");
        jMenuItem_exportSimplifiedIdav.setEnabled(false);
        jMenuItem_exportSimplifiedIdav.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_exportSimplifiedIdavActionPerformed(evt);
            }
        });
        jMenu_File.add(jMenuItem_exportSimplifiedIdav);

        jMenuItem_exit.setText("Exit");
        jMenuItem_exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_exitActionPerformed(evt);
            }
        });
        jMenu_File.add(jMenuItem_exit);

        jMenuBar1.add(jMenu_File);

        jMenu_Run.setText("Run");

        jMenuItem_runAnalysis.setText("Run Analysis");
        jMenuItem_runAnalysis.setEnabled(false);
        jMenuItem_runAnalysis.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_runAnalysisActionPerformed(evt);
            }
        });
        jMenu_Run.add(jMenuItem_runAnalysis);

        jMenuItem_runBayes.setText("Run Bayes");
        jMenuItem_runBayes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_runBayesActionPerformed(evt);
            }
        });
        jMenu_Run.add(jMenuItem_runBayes);

        jMenuBar1.add(jMenu_Run);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane_Main)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jTabbedPane_Main)
                .addContainerGap())
        );

        jTabbedPane_Main.getAccessibleContext().setAccessibleName("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem_openActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_openActionPerformed
        // reset values
        analyzer = null;
        jMenuItem_exportAanResults.setEnabled(false);
        jMenuItem_exportSimplifiedIdav.setEnabled(false);
        
        int returnVal = inputFileChooser.showOpenDialog(this);
        
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            selectedInputFile = inputFileChooser.getSelectedFile();
            try {
                // reset tabs
                reset();
                
                // Display opened file name
                this.setTitle("Attribute Analyzer - " + selectedInputFile.getName());
                
                // Read Raw Data
                RawDataViewer rdv = new RawDataViewer(selectedInputFile.getAbsolutePath());
                jTextArea_rawData.setText(rdv.read());
                
                // Create / Read iDAV
                IdavReaderFactory idf = new IdavReaderFactory();
                IdavReader reader = idf.getIDAV_Reader(selectedInputFile.getAbsolutePath());
                
                initDataViews(reader);
                jMenuItem_runAnalysis.setEnabled(true);
                
            } catch (Exception ex) {
                
                JOptionPane.showMessageDialog(this, ex.getMessage(), "Input Load Error", 0);
            }   
        }
    }//GEN-LAST:event_jMenuItem_openActionPerformed
          
    private void jMenuItem_exitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_exitActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jMenuItem_exitActionPerformed

    private void jMenuItem_runAnalysisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_runAnalysisActionPerformed
                
        // Reset the tabs
        reset();
                
        // Check to ensure that there is only one class (attr marked with usage 'O')
        Attribute classAttr = null;
        int numClasses = 0;
        for (Attribute attr : ((AttrDataTableModel)jTable_attrData.getModel()).getAttributes()) {
            if (attr.getAttrUsage() == AttrUsage.O) {
                numClasses++;
                classAttr = attr;
            }
        }
        if (numClasses > 1) {
                JOptionPane.showMessageDialog(this, 
                        "Only one class may be specified as 'O' (Output)", 
                        "Attribute Error", 0);
                return;
        } else if (numClasses < 1) {
                JOptionPane.showMessageDialog(this, 
                        "No output class has been specified.", 
                        "Attribute Error", 0);
                return;  
        }
        
        // Check to ensure that all instances have a value for this class
        String invalidInstances = "";
        for (Instance inst : ((InstDataTableModel)jTable_instData.getModel()).getInstances()) {
            String instClassVal = inst.properties.get(classAttr).getDisplayValue();
            if (classAttr.getAttrType() == AttrType.C
                    && (instClassVal.isEmpty() || instClassVal.trim().equals("?"))) {
                invalidInstances += "(Line#" + inst.num + ")\n";
            }
        }
        
        if (!invalidInstances.isEmpty()) {
            JOptionPane.showMessageDialog(this, 
                        "Invalid Instances:\n" + invalidInstances, 
                        "Invalid Instance(s)", 0);
                return;
        }
        
        analyzer = new AttrClustAnalyzer(
                ((AttrDataTableModel)jTable_attrData.getModel()).getAttributes(),
                ((InstDataTableModel)jTable_instData.getModel()).getInstances());
        
        // Check for bad class
        boolean undesireableClass = false;
        if (analyzer.getNumClasses() > 30) {
            JOptionPane.showMessageDialog(this, 
                        "The output attribute contains more than 30 unique values," +
                            " individual class results will not be displayed.", 
                        "Undesirable Class", 0);
            undesireableClass = true;
        }
        
        // Display Analyzer Results
        jMenuItem_exportAanResults.setEnabled(true);    
        jMenuItem_exportSimplifiedIdav.setEnabled(true);
        jTabbedPane_Main.add("Domain Results",  new DomainResults(analyzer));
        if (!undesireableClass) {
            for (String classVal : analyzer.getUniqueClassValues()) {
                jTabbedPane_Main.add(classVal,  new CatDepResults(classVal, analyzer));
            }
        }
        jTabbedPane_Main.setSelectedIndex(1);
    }//GEN-LAST:event_jMenuItem_runAnalysisActionPerformed

    private void jMenuItem_exportAanResultsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_exportAanResultsActionPerformed
        
        // Generate export name
        int dotIndex = selectedInputFile.getAbsolutePath().lastIndexOf(".");
        String newFileLoc = selectedInputFile.getAbsolutePath().substring(0, dotIndex);
        newFileLoc += "_AANanalysis.xml";
        File newFile = new File(newFileLoc);
        
        // Set the chooser to show this name/directory
        outputFileChooser.setCurrentDirectory(newFile);
        outputFileChooser.setSelectedFile(newFile);
        int returnVal = outputFileChooser.showSaveDialog(this);
        
        // do the export
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = outputFileChooser.getSelectedFile();
            try {
                String fileLoc = file.getAbsolutePath();
                if (!file.getAbsolutePath().endsWith(".xml")) {
                    fileLoc += ".xml";
                }
                
                AczOutputWriter writer = new AczOutputWriter(analyzer);
                writer.writeAanOutputFile(fileLoc);
                
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage(), "Export Error", 0);
            }
        }
    }//GEN-LAST:event_jMenuItem_exportAanResultsActionPerformed

    private void jMenuItem_exportSimplifiedIdavActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_exportSimplifiedIdavActionPerformed
        
        // generate the file name
        int dotIndex = selectedInputFile.getAbsolutePath().lastIndexOf(".");
        String newFileLoc = selectedInputFile.getAbsolutePath().substring(0, dotIndex);
        newFileLoc += "_Simplified.txt";
        File newFile = new File(newFileLoc);
        
        // Set the name/directory of the chooser
        txtFileChooser.setCurrentDirectory(newFile);
        txtFileChooser.setSelectedFile(newFile);
        int returnVal = txtFileChooser.showSaveDialog(this);
        
        // do the export
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = txtFileChooser.getSelectedFile();
            try {
                
                String fileLoc = file.getAbsolutePath();
                if (!file.getAbsolutePath().endsWith(".txt")) {
                    fileLoc += ".txt";
                }
                
                IdavWriter writer = new IdavWriter(
                        ((AttrDataTableModel)jTable_attrData.getModel()).getAttributes(), 
                        ((InstDataTableModel)jTable_instData.getModel()).getInstances());
                writer.createSimplifiedIDAVFile(fileLoc);
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage(), "Export Error", 0);
            }
        }
    }//GEN-LAST:event_jMenuItem_exportSimplifiedIdavActionPerformed

    private void jMenuItem_runBayesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_runBayesActionPerformed
        /*
         * How to implement the 'Bayes' functionality:
         * [DONE] Add a new menu item to the 'Run' tab on the MainWdw
         * [DONE] Link this menu item to a method on the MainWdw backing by double clicking the menu item
         * From this method, call a new class called 'Bayes' (or something) to perform the following:
         * - This method can use the atomic references to the attrs[] and insts[] which hold the 
         *   current values of the dataset to perform whatever calculations or conversions are required.
         * - I would start by making a iDA writer to output the data into the required iDA format.
         *   You can use my writers as an example under the acz.output package
         * - I assume this Bayes algorithm spits out some text output, so you can store that in a file
         *   and just read that using a new 'BayesInputReader' class. Again you can use my readers as
         *   an example under the acz.input package
         * - This input can be read into a textarea on a newly created tab titled 'Bayes Results'
         *   - If you want the Bayes window to be more complex than this, I would suggest making
         *     a page fragment to pass to the texarea.add() method instead of just the TextArea.
         *     You can use my 'Domain Results' page fragment as an example in the acz.ui package.
         * 
         * - Note that the call to make the new iDA file, run the Bayes algorithm writing the output
         *   to a new file, creating a new tab, and writing the Bayes output to a textarea on the tab
         *   all will take place in the new method invoked by the 'Run Bayes' menu option in the backing
         *   of the MainWdw. This will not directly effect the ACZ dataset in any way... you're simply
         *   passing the current values of the attrs[] and insts[] to the Bayes subroutine.
         */
        jTabbedPane_Main.add("Bayes Results",  new TextArea("Not Implemented."));
    }//GEN-LAST:event_jMenuItem_runBayesActionPerformed

// =======================================================================================
// --=========================== Helper Methods ========================================--
// =======================================================================================
    private void initDataViews(IdavReader reader) {
        attrs = new AtomicReference<Attribute[]>(reader.getAttributes());
        insts = new AtomicReference<Instance[]>(reader.getInstances());
        
        initInstDataView(attrs, insts); // must be first
        initAttrDataView(attrs, insts);
    }
    
    private void initInstDataView(AtomicReference<Attribute[]> attrs, AtomicReference<Instance[]> insts) {
        jTable_instData.setModel(new InstDataTableModel(attrs, insts));
        jTable_instData.setEnabled(true);
    }
    
    private void initAttrDataView(AtomicReference<Attribute[]> attrs, AtomicReference<Instance[]> insts) {
        AttrDataTableModel model = new AttrDataTableModel(attrs, 
                new AtomicReference<InstDataTableModel>(
                    (InstDataTableModel)jTable_instData.getModel()));
        
        model.addStdEventListener(new StdErrorEventListener(){
            public void handleStdErrorEvent(StdErrorEvent event) {
                JOptionPane.showMessageDialog(null, event.msg, "Input Load Error", 0);
            }
        });
        jTable_attrData.setModel(model);
        
        // restrict input for attrType
        TableColumn attrTypeColumn = jTable_attrData.getColumnModel().getColumn(1);
        JComboBox cb_AttrType = new JComboBox();
        cb_AttrType.addItem(Attribute.AttrType.C);
        cb_AttrType.addItem(Attribute.AttrType.R);
        attrTypeColumn.setCellEditor(new DefaultCellEditor(cb_AttrType));
        
        // restrict input for attrUsage
        TableColumn attrUsageColumn = jTable_attrData.getColumnModel().getColumn(2);
        JComboBox cb_AttrUsage = new JComboBox();
        cb_AttrUsage.addItem(Attribute.AttrUsage.D);
        cb_AttrUsage.addItem(Attribute.AttrUsage.I);
        cb_AttrUsage.addItem(Attribute.AttrUsage.O);
        cb_AttrUsage.addItem(Attribute.AttrUsage.U);
        attrUsageColumn.setCellEditor(new DefaultCellEditor(cb_AttrUsage));
        
        jTable_attrData.setEnabled(true);
    }
    
    // Reset the window to its original state
    private void reset() {
        // should just need to remove all tabs except the main tab        
        int numTabs = jTabbedPane_Main.getTabCount();
        if (numTabs > 1) { 
            jTabbedPane_Main.removeAll();
            jTabbedPane_Main.add("Data", jPanel_Data);
        }
    }

// =======================================================================================
// =======================================================================================
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainWdw.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainWdw.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainWdw.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWdw.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new MainWdw().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JFileChooser inputFileChooser;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem_exit;
    private javax.swing.JMenuItem jMenuItem_exportAanResults;
    private javax.swing.JMenuItem jMenuItem_exportSimplifiedIdav;
    private javax.swing.JMenuItem jMenuItem_open;
    private javax.swing.JMenuItem jMenuItem_runAnalysis;
    private javax.swing.JMenuItem jMenuItem_runBayes;
    private javax.swing.JMenu jMenu_File;
    private javax.swing.JMenu jMenu_Run;
    private javax.swing.JPanel jPanel_Data;
    private javax.swing.JPanel jPanel_attrData;
    private javax.swing.JPanel jPanel_instData;
    private javax.swing.JPanel jPanel_rawData;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JSplitPane jSplitPane2;
    private javax.swing.JTabbedPane jTabbedPane_Main;
    private javax.swing.JTable jTable_attrData;
    private javax.swing.JTable jTable_instData;
    private javax.swing.JTextArea jTextArea_rawData;
    private javax.swing.JFileChooser outputFileChooser;
    private javax.swing.JFileChooser txtFileChooser;
    // End of variables declaration//GEN-END:variables
}

